__device__ double shfl_xor(const double x, const int bit){
	const int hi = __shfl_xor(__double2hiint(x), bit);
	const int lo = __shfl_xor(__double2loint(x), bit);
	return __hiloint2double(hi, lo);
}

__device__ double warp_reduce_double(double x){
	x += shfl_xor(x, 16);
	x += shfl_xor(x,  8);
	x += shfl_xor(x,  4);
	x += shfl_xor(x,  2);
	x += shfl_xor(x,  1);
	return x;
}

template <typename Tp, int NWORD, int NTHRE>
__device__ void static_memcpy(void *vdst, const void *vsrc)
{
	Tp *dst = (Tp *)vdst;
	const Tp *src = (const Tp *)vsrc;
	const int tid = threadIdx.x;
	const int niter = NWORD / NTHRE;
#pragma unroll
	for(int i=0; i<niter; i++){
		dst[tid + i*NTHRE] = src[tid + i*NTHRE];
	}
	if(NWORD % NTHRE){
		if(tid + niter*NTHRE < NWORD){
			dst[tid + niter*NTHRE] = src[tid + niter*NTHRE];
		}
	}
}

template <int nx, int ny>
__device__ double vreduce(double x, void *vshm){
	const int xid = threadIdx.x;
	const int yid = threadIdx.y;
	double (*shm)[nx] = (double (*)[nx])(vshm); // shm[ny-1][nx];

	__syncthreads();
	if(0 != yid) shm[yid-1][xid] = x;
	__syncthreads();

	if(0 == yid){
#pragma unroll
		for(int j=0; j<ny-1; j++){
			x += shm[j][xid];
		}
	}

	return x;
}

template<int NWARP, int NWORD>
__device__ void reduce_final(const double x, double *dst){
	__shared__ double fsh[NWORD][NWARP-1];
	const int xid = threadIdx.x;
	const int yid = threadIdx.y;

	if((xid > 0) && (xid%32 == 0)) fsh[yid][xid/32 - 1] = x;
	__syncthreads();

	if(xid == 0){
		double z = x;
		for(int j=0; j<NWARP-1; j++){
			z += fsh[yid][j];
		}
		dst[yid] = z;
	}
}

